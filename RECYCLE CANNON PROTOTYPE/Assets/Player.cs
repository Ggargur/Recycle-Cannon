//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""7a27983a-2704-48de-a227-cfef9290cbac"",
            ""actions"": [
                {
                    ""name"": ""Press"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c218e388-e200-44a0-a313-ed83e3845873"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Delta"",
                    ""type"": ""Value"",
                    ""id"": ""a7a0e796-17ab-430f-a63a-a1ac34d875fb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""fc2ca827-cfc4-490a-acbd-afe0b88eafbe"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Player Directional"",
                    ""type"": ""Value"",
                    ""id"": ""5fa52160-336c-483b-96ec-78d93dc88e6c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turret Directional"",
                    ""type"": ""Value"",
                    ""id"": ""8b8c1dec-3ed1-4e4d-b896-737fe84b7470"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touched"",
                    ""type"": ""Button"",
                    ""id"": ""10a13b64-e7ef-48c1-919f-f82fa885712f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3ffa09c7-3daf-4ef0-b8bd-95c84aeb6a9f"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Main Control"",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43b36b97-3986-467b-ba34-b25283c6b205"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main Control"",
                    ""action"": ""Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d28bd47a-bfb7-48c0-ac5e-b93aed78b85e"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main Control"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a34cfbaa-354d-43a2-84ff-0db7a48a1ced"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main Control"",
                    ""action"": ""Player Directional"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7135e56e-19db-45b0-95d6-9c18045a6bd7"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main Control"",
                    ""action"": ""Turret Directional"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3428f65-1492-49c1-8a2d-44b56e06c6f1"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touched"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Main Control"",
            ""bindingGroup"": ""Main Control"",
            ""devices"": []
        }
    ]
}");
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_Press = m_Touch.FindAction("Press", throwIfNotFound: true);
        m_Touch_Delta = m_Touch.FindAction("Delta", throwIfNotFound: true);
        m_Touch_Position = m_Touch.FindAction("Position", throwIfNotFound: true);
        m_Touch_PlayerDirectional = m_Touch.FindAction("Player Directional", throwIfNotFound: true);
        m_Touch_TurretDirectional = m_Touch.FindAction("Turret Directional", throwIfNotFound: true);
        m_Touch_Touched = m_Touch.FindAction("Touched", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touch
    private readonly InputActionMap m_Touch;
    private ITouchActions m_TouchActionsCallbackInterface;
    private readonly InputAction m_Touch_Press;
    private readonly InputAction m_Touch_Delta;
    private readonly InputAction m_Touch_Position;
    private readonly InputAction m_Touch_PlayerDirectional;
    private readonly InputAction m_Touch_TurretDirectional;
    private readonly InputAction m_Touch_Touched;
    public struct TouchActions
    {
        private @Player m_Wrapper;
        public TouchActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @Press => m_Wrapper.m_Touch_Press;
        public InputAction @Delta => m_Wrapper.m_Touch_Delta;
        public InputAction @Position => m_Wrapper.m_Touch_Position;
        public InputAction @PlayerDirectional => m_Wrapper.m_Touch_PlayerDirectional;
        public InputAction @TurretDirectional => m_Wrapper.m_Touch_TurretDirectional;
        public InputAction @Touched => m_Wrapper.m_Touch_Touched;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void SetCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterface != null)
            {
                @Press.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPress;
                @Press.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPress;
                @Press.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPress;
                @Delta.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnDelta;
                @Delta.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnDelta;
                @Delta.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnDelta;
                @Position.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPosition;
                @PlayerDirectional.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPlayerDirectional;
                @PlayerDirectional.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPlayerDirectional;
                @PlayerDirectional.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPlayerDirectional;
                @TurretDirectional.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTurretDirectional;
                @TurretDirectional.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTurretDirectional;
                @TurretDirectional.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTurretDirectional;
                @Touched.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouched;
                @Touched.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouched;
                @Touched.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouched;
            }
            m_Wrapper.m_TouchActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Press.started += instance.OnPress;
                @Press.performed += instance.OnPress;
                @Press.canceled += instance.OnPress;
                @Delta.started += instance.OnDelta;
                @Delta.performed += instance.OnDelta;
                @Delta.canceled += instance.OnDelta;
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @PlayerDirectional.started += instance.OnPlayerDirectional;
                @PlayerDirectional.performed += instance.OnPlayerDirectional;
                @PlayerDirectional.canceled += instance.OnPlayerDirectional;
                @TurretDirectional.started += instance.OnTurretDirectional;
                @TurretDirectional.performed += instance.OnTurretDirectional;
                @TurretDirectional.canceled += instance.OnTurretDirectional;
                @Touched.started += instance.OnTouched;
                @Touched.performed += instance.OnTouched;
                @Touched.canceled += instance.OnTouched;
            }
        }
    }
    public TouchActions @Touch => new TouchActions(this);
    private int m_MainControlSchemeIndex = -1;
    public InputControlScheme MainControlScheme
    {
        get
        {
            if (m_MainControlSchemeIndex == -1) m_MainControlSchemeIndex = asset.FindControlSchemeIndex("Main Control");
            return asset.controlSchemes[m_MainControlSchemeIndex];
        }
    }
    public interface ITouchActions
    {
        void OnPress(InputAction.CallbackContext context);
        void OnDelta(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnPlayerDirectional(InputAction.CallbackContext context);
        void OnTurretDirectional(InputAction.CallbackContext context);
        void OnTouched(InputAction.CallbackContext context);
    }
}
